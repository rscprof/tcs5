#include "imports/stdlib.fc";


forall X -> tuple create_tuple(X value, int n) asm """
DUP
1 SETGLOB
DEC
REPEAT:<{ DUP }>
1 GETGLOB
TUPLEVAR
""";

forall X -> X get_value(tuple t, int i, int j) inline {
    return at(at(t, i), j);
}

forall X -> tuple set_index_var(tuple t, X value, int pos) asm "SETINDEXVAR";

forall X -> tuple set_value(tuple t, int i, int j, X value) inline {
    return set_index_var(t, set_index_var(at(t, i), value, j), i);
}

;;(tuple,int) get_set_value_min (tuple t, int i, int j, int value) inline {
;;    tuple str = at(t, i);
;;    if (at(str, j) <= value) {
;;        return (t,false);
;;    }
;;    return (set_index_var(t,set_index_var(str,value,j),i),true);
;;}


() recv_internal(slice in_msg_body) impure {
}




;; Tuple of slice's
(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {

    ;; return (-1,0,0, null());
    ;;            () solve() method_id {
    ;;                var n = 3;
    ;;                var m = 3;
    ;;                tuple maze = empty_tuple();
    ;;                tuple maze2 = empty_tuple();
    ;;                maze2~tpush("S"u);
    ;;                maze2~tpush("."u);
    ;;                maze2~tpush("."u);
    ;;                maze~tpush(maze2);
    ;;                tuple maze2 = empty_tuple();
    ;;                maze2~tpush("?"u);
    ;;                maze2~tpush("X"u);
    ;;                maze2~tpush("X"u);
    ;;                maze~tpush(maze2);
    ;;                tuple maze2 = empty_tuple();
    ;;               maze2~tpush("."u);
    ;;                maze2~tpush("."u);
    ;;                maze2~tpush("E"u);
    ;;                maze~tpush(maze2);
    ;;                maze~tpush("S..");
    ;;                maze~tpush(".??");
    ;;                maze~tpush("..E");
  ;;  int endx = 0;
  ;;  int endy = 0;
    ;;    (int startx,int starty) = look_start(n,m,maze);
    ;;    (int endx,int endy) = look_end(n,m,maze);
    tuple maze2 = empty_tuple();
    var current = null();
    tuple state = null();
    {
        int startx = 0;
        int starty = 0;
        var i = 0;
        repeat (n) {
            tuple str = at(maze, i);
            tuple str_end = empty_tuple();
            var j = 0;
            repeat (m) {
                int sym = str.at(j);
                str_end~tpush((sym == "?"u) ? 1 : (sym == "X"u) ? 1000 : (sym == "E"u) ? -1 : 0);
                if (sym == "S"u) {
                    startx = i;
                    starty = j;
                }
                j = j + 1;
            }
            maze2~tpush(str_end);
            i = i + 1;
        }
        ;; var state = new_dict();

        ;;  state = state.udict_set_builder(10, startx << 5 + starty, begin_cell().store_uint(0, 20));
        state = set_value(create_tuple(create_tuple(1024 * 1024, m), n), startx, starty, 0);
        ;; var finished = 0;
        current = cons ([starty, 0, null(), startx], null());
    }




    var answer = null();
    var countBest = 2000000;
    do {
        var next = null();
        do {
            (var curpos, current) = uncons(current);

            [int _y, int count, _, int _x] = curpos;
            if (count < countBest) {
                var dx = (_x) ? -1 : 0;
                var enddy = (_y == (m - 1)) ? 0 : 1;
                var enddx = (_x == (n - 1)) ? 0 : 1;

                do {
                    var x = _x + dx;
                    var adddy = dx ? 1 : 2 ;
                    var startdy = (_y) ? -1 : dx ? 0 : 1;
                        var str = at(maze2, x);
                        var dy = startdy;
                        do {
                                [int y, int count, tuple path, _] = curpos;
                                y = y + dy;
                                var sym = at(str, y);
                                count = count + sym;
                                if (count < get_value(state, x, y) ) {
                                    state = set_value(state, x, y, count);
                                    if (sym < 0) {
                                        answer = path;
                                        countBest = count + 1;
                                    } else {
                                     ;;   path = ;
                                        next = cons([y, count, cons([x, y], path), x], next);
                                    }
                                }
                            dy = dy + adddy;
                        } until (dy > enddy);
                    dx = dx + 1;
                } until (dx > enddx);
            }
        } until (null?(current));
        current = next;
    } until (null? (current));


    if (countBest == 2000000) {
        return (-1, 0, 0, null());
    }
    ;;   var path = answer;
    ;; var prob = countBest;

    var distance = 1;
    while (~ null?(answer)) {
        (var res, answer) = answer.uncons();
        [int x, int y] = res;
        ;;    (int x,int y) = divmod(index,32);
        distance = distance + 1;
        maze = set_value(maze,x,y,"!"u);
;;        var str = at(maze, x);
;;        str = set_index_var(str, "!"u, y);
;;        maze = set_index_var(maze, str, x);
    }

    (int d, int m) = divmod(countBest, 1000);
    return (d, m, distance, maze);
}

#include "imports/stdlib.fc";

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

(tuple, [(int,int),int,tuple]) update(tuple next, [(int,int),int,tuple] answer, [(int,int),int,tuple] newpos, (int,int) end, int flag)
{

    var countBest = 2000000;
    if ~ null?(answer) {
        [_, countBest, _] = answer;
    }
    if (flag) {
        ;;var f = first(newpos);
        [var f,var count,_] = newpos;
        (var x, var y) = f;
        (var endx, var endy) = end;

        if ((x == endx) & (y == endy)) {
            if (null? (answer)) {
                answer = newpos;
            } else {
                if (count < countBest) {
                    answer = newpos;
                }
            }
        } else {
            next = cons( newpos,next);
        }
    }

    ;;   next~dump();
    return (next, answer);
}

;; (start,0,())
([(int,int),int,tuple],cell,int) test ([(int,int),int,tuple] curpos,cell state,tuple maze,int dx,int dy,int n,int m)
{
    ;;  curpos~dump();

    [(int x,int y),int count,tuple path] = curpos;
    ;;    var pos = first(curpos);
    ;;    var count = second(curpos);
    ;;    var path = third(curpos);
    ;;    ;;    var count, var path) = curpos;
    ;; (var x, var y) = pos;
    x = x + dx;
    y = y + dy;
    ;;  x~dump();
    ;;  y~dump();
    if (x < 0) { return (null(),state,0); }
    if (y < 0) { return (null(),state,0); }
    if (x >= n) { return (null(),state,0); }
    if (y >= m) { return (null(),state,0); }
    var str = at(maze,x);

    var sym = at(str,y);
    ;;  sym~dump();
    if (sym == "S"u) { return (null(),state,0); }
    if (sym == "X"u) { count = count + 1024; }
    (var state_cell, int f) = state.udict_get?(10,(x << 5) + y);
    if (sym == "?"u) { count = count + 1; }
    if (f) {
        var countInState = state_cell.preload_int(20);
        ;;  countInState~dump();
        if (countInState <= count) {
            { return (null(),state,0); }
        }
    }
    state = state.udict_set(10,(x << 5) + y , begin_cell().store_uint(count,20).end_cell().begin_parse());
    ;;  state~dump();
    ;;   x~dump();
    ;;   y~dump();
    ;;   count~dump();
    var newpos = (x,y);
    if (sym != "E"u) { path = cons([x,y],path); }
    return ([newpos,count,path], state,-1);
}


(int) tlen (tuple t) asm "TLEN";

;; Tuple of slice's
(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {

    ;; return (-1,0,0, null());
    ;;() solve() method_id {
    ;;    var n = 3;
    ;;    var m = 3;
    ;;    tuple maze = empty_tuple();
    ;;    tuple maze2 = empty_tuple();
    ;;    maze2~tpush("S"u);
    ;;    maze2~tpush("."u);
    ;;    maze2~tpush("."u);
    ;;    maze~tpush(maze2);
    ;;    tuple maze2 = empty_tuple();
    ;;    maze2~tpush("?"u);
    ;;    maze2~tpush("X"u);
    ;;    maze2~tpush("X"u);
    ;;    maze~tpush(maze2);
    ;;    tuple maze2 = empty_tuple();
    ;;   maze2~tpush("."u);
    ;;    maze2~tpush("."u);
    ;;    maze2~tpush("E"u);
    ;;    maze~tpush(maze2);
    ;;    maze~tpush("S..");
    ;;    maze~tpush(".??");
    ;;    maze~tpush("..E");
    var i = 0;
    var start = (0,0);
    var end = (0,0);
    repeat(n) {
        var str = at(maze,i);  ;;.begin_parse();
        var j = 0;

        repeat(m) {

            var item = at(str,j);
            ;;var item = sl.begin_parse().preload_uint(8);
            ;; maze.tpush(str);
            ;;    var item = at(str,j);
            if (item == "S"u) {
                start = (i , j);
            }
            if (item == "E"u) {
                end = (i , j);
            }
            j = j + 1;
        }
        i  = i + 1;
    }

    var state = new_dict();

    var failed = 0;
    var finished = 0;
    var current = cons ([start,0,null()], null());
    var answer = null();
    ;; current~dump();
    while (  ~ finished ) {
        var next = null();
        while (~ null?(current)) {
            (var curpos, current) = uncons(current);

            (var newpos, state, var flag) = test (curpos, state, maze, -1, -1, n, m);
            ;;   newpos~dump();
            (next, answer) = update(next, answer, newpos, end, flag);
            (newpos, state, flag) = test (curpos, state, maze, -1, 0, n, m);
            (next, answer) = update(next, answer, newpos, end, flag);
            (newpos, state, flag) = test (curpos, state, maze, -1, 1, n, m);
            (next, answer) = update(next, answer, newpos, end, flag);
            ;;   next~dump();
            (newpos, state, flag) = test (curpos, state, maze, 0, -1, n, m);
            (next, answer) = update(next, answer, newpos, end, flag);
            (newpos, state, flag) = test (curpos, state, maze, 0, 1, n, m);
            (next, answer) = update(next, answer, newpos, end, flag);
            (newpos, state, flag) = test (curpos, state, maze, 1, -1, n, m);
            (next, answer) = update(next, answer, newpos, end, flag);
            (newpos, state, flag) = test (curpos, state, maze, 1, 0, n, m);
            (next, answer) = update(next, answer, newpos, end, flag);
            (newpos, state, flag) = test (curpos, state, maze, 1, 1, n, m);
            (next, answer) = update(next, answer, newpos, end, flag);
        }
        if null? (next) {
            finished = true;
        }
        current = next;
    }


    if (null?(answer)) {
        ;; return ();
        return (-1,0,0, null());
    }
    ;;  answer~dump();
    ;; [(int,int),int,tuple] answer
    [_,var prob,var path] = answer;
;;    var numProb = 100;
;;    repeat(prob) {
;;        numProb = numProb >> 1;
;;    }

    var res_dict = 0;
;;    var res_dict = new_dict();
;;    var value = begin_cell().end_cell().begin_parse();
    var distance = 0;
    ;; path~dump();
    while (~ null?(path)) {
        (var coords, path) = path.uncons();
        [int x,int y] = coords;
        distance = distance + 1;
        res_dict = res_dict | (1 <<  (x*m + y ) ); ;;mul is less exoensice than << ???????????????
        ;;res_dict~udict_set(10,(x << 5) + y, value);
    }

    tuple maze2 = empty_tuple();
    var i = 0;
    repeat(n) {
        var str = at(maze, i);
        var j = 0;
        var str_gen = empty_tuple();
        ;;  var str_print = begin_cell();
        ;;   tuple str_gen = empty_tuple();
        repeat(m) {
            ;;       str~dump();
            var item = at(str,j);
          ;;  (_,int flag) =     res_dict.udict_get?(10, (i << 5) + j);
            j = j + 1;
            if (res_dict & 1) {
                str_gen~tpush("!"u);
                ;;      str_print~store_uint("!"u,8);
            } else {
                str_gen~tpush(item);
                ;;        str_print~store_uint(item,8);
            }
            res_dict = res_dict >> 1;
        }
        ;;  var sfd = str_print.end_cell().begin_parse();
        ;;    sfd~strdump();
        i  = i + 1;
        ;;   str_gen~dump();
        maze2~tpush(str_gen);
    }
    var res =  (prob / 1024,prob % 1024, distance + 1 , maze2);
    ;;  numProb~dump();
    ;;  distance~dump();
    ;;  maze2~dump();
    return res;
    ;;  return ();
}

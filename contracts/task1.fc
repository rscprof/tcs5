#include "imports/stdlib.fc";
;;Create a contract that has the ability to transfer all TONs
;; from its balance in case the owner of the contract stops communicating.
;;

;;
;;Contract Store:
;;
;;public_key: uint256
;;execution_time: uint32
;;receiver: MsgAddressInt
;;seqno: uint32




;; https://docs.ton.org/develop/func/functions
;; We need not to work with internal messages by task
() recv_internal() impure {
}



() recv_external(slice in_msg_body) impure {
    if in_msg_body~load_uint(32) == 0x9df10277 {
        in_msg_body~skip_bits(64);
        var signature = in_msg_body~load_bits(512);
        cell ref = in_msg_body.preload_ref();
        var parse = ref.begin_parse();
        int locked_for = parse~load_int(32);
        int new_seqno = parse.preload_uint(32);
        var ds = begin_parse(get_data());
        int public_key = ds~load_uint(256);
        int execution_time = ds~load_uint(32);
        var receiver = ds~load_msg_addr();
        throw_if(119, new_seqno != ds.preload_uint(32) + 1);
        throw_unless(120, check_signature(cell_hash(ref),signature,public_key));
        throw_if(121,locked_for <= 0);
        var now_time = now();
        throw_if(122, execution_time < now_time );
        now_time = now_time + locked_for;
        throw_if(123, now_time  < execution_time);
        accept_message();
        set_data(
            begin_cell().store_uint(public_key,256)
            .store_uint(now_time,32)
            .store_slice(receiver)
            .store_uint(new_seqno , 32)
            .end_cell()
        );
        return();
    }
        var ds = begin_parse(get_data());
        ds~skip_bits(256);
        int execution_time = ds~load_uint(32);
        throw_if(124,execution_time > now() );
        var receiver = ds~load_msg_addr();
        accept_message();
        cell msg = begin_cell()
            .store_uint(0x18, 6) ;; flags
            .store_slice(receiver) ;; destination address
             .store_uint(0,4 + 4 + 4 + 3 + 64 + 32)
            .end_cell();

            send_raw_message(msg, 128);
}

int get_seqno() method_id {
    var ds = begin_parse(get_data()).skip_bits(256 + 32 );
    ds~load_msg_addr();
    return ds.preload_uint(32);
}

int  get_execution_time() method_id {
    return begin_parse(get_data()).skip_bits(256).preload_uint(32);
}

